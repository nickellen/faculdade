AV3-b
----- SELECIONAR NOMES DOS ATORES CUJA PRIMEIRA LETRA DO NOME É IGUAL A ULTIMA LETRA DO NOME

SELECT first_name, last_name from actor WHERE LEFT(first_name,1)=RIGHT(last_name,1);

----- SELECIONAR OS TITULOS DOS FILMES QUE A ATRIZ PENELOPE GUINESS ATUOU, 
      JUNTAMENTO COM O DI E O NOME DA ATRIZ E ID'S DOS FILMES

SELECT film_actor.film_id,  film.title, 
       film_actor.actor_id, actor.first_name, actor.last_name
from (actor join film_actor on actor.actor_id=film_actor.actor_id) join film on film.film_id=film_actor.film_id 
WHERE actor.first_name like "PENELOPE" AND actor.last_name="GUINESS";

------ SELECIONAR O FILME COM MAIOR NUMERO DE ATORES

------ SELECINAR O ATOR QUE MENOS ATUOU EM FILMES

------ EXIBIR OS FILMES DE MAIOR DURAÇÃO DE CADA CATEGORIA


Esta avaliação ocorrerá sobre a base de dados Sakila, portanto dedique um tempo para compreender essa base de dados.

AÇÕES A SEREM FEITAS:

A1) elaborar e fornecer comandos SQL que utilizem os recursos abaixo. Além do comando SQL, você deve fornecer também uma descrição textual explicando no que consistem os resultados retornados. Caso queira, pode também explicar o SQL.

a) consultas aninhadas

----- SELECIONAR OS TITULOS DOS FILMES QUE A ATRIZ PENELOPE GUINESS ATUOU

SELECT title FROM film
WHERE film.film_id in ( SELECT film_id FROM film_actor
                    WHERE actor_id in (SELECT actor_id FROM actor
                                      WHERE first_name like "PENELOPE" AND last_name like "GUINESS")
                  );

b) consultas aninhadas correlacionadas

c) exists 

----- SELECIONAR ATORES QUE TEM NOMES IGUAIS A NOMES DE CLIENTES

SELECT * FROM actor
WHERE EXISTS 
   (SELECT first_name, last_name FROM customer
    WHERE first_name=actor.first_name AND last_name=actor.last_name
);

d) unique ou distinct

e) junções naturais

----- SELECIONAR TODOS OS ATORES DE LADY STAGE

SELECT film_actor.film_id,  film.title, 
       film_actor.actor_id, actor.first_name, actor.last_name
from (actor join film_actor on actor.actor_id=film_actor.actor_id) join film on film.film_id=film_actor.film_id 
WHERE film.title like "LADY STAGE";

----- EXIBIR OS TITULOS, DURAÇÃO E CATEGORIA DOS FILMES DA CATEGORIA CLASSICS

SELECT film.title, film.length, category.name
FROM (category JOIN film_category on category.category_id=film_category.category_id) 
      JOIN film on film.film_id=film_category.film_id
WHERE category.name="Classics";

----- EXIBIR O FILME DA CATEGORIA FOREIGN DE MANIOR DURAÇÃO
  
SELECT film.title, film.length, category.name
FROM (category JOIN film_category on category.category_id=film_category.category_id) 
      JOIN film on film.film_id=film_category.film_id
WHERE category.name="Foreign" 
ORDER BY film.length DESC LIMIT 1;

f) junção left ou right
g) agregação
h) group by

A2) fornecer o comando de criação de uma visão;

A3) elaborar um programa (sugestão: em python) que percorra os registros obtidos por um dos comandos SQL's que foi criado nos itens "a" a "h".

PARA TODAS AS RESPOSTAS FORNEÇA TAMBÉM um ou mais print's da tela, demonstrando a execução do comando.

O envio ocorrerá por meio de um link de acesso aos arquivos (endereço de repositório, google drive, etc). Sugere-se o uso de repositórios para compor portfólio pessoal de aprendizagem.

FIM
